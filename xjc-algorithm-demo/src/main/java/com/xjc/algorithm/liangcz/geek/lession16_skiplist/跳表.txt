# 跳表
跳表可以认为是链表的二分法实现，因为数组要求内存是连续性，不适合某些场景
为了快速索引到链表节点，在跳表上加索引，加down节点指向下一级索引。
跳表是以空间换时间的典型实现。
# 跳表有多快
单链表的查找时间复杂度是O(n)，跳表的时间复杂度是logn 
每一层级是logn，一层最多访问3个元素，3*logn=logn
# 空间复杂度
n/2,n/4,n/8,...8,4,2 = n-2，所以空间复杂度是O(n)
# 不要太在意空间复杂度
实际上在软件开发中，索引只是建几个简单的指针，不需要占用很大的空间
# 插入和删除
单链表的插入和删除时间复杂度是O(1)，跳表的插入和删除时间复杂度也是logn
，只需要找到节点，再完成几步操作
# redis 使用跳表实现
原因是跳表简单，简单就不容易出错，查找效率高。
另外跳表比较灵活，相比红黑树、它可以通过灵活的索引。
在区间内查找数据，红黑树没有跳表时间复杂度低。
redis基础操作包括：查找、插入、删除、在区间中查找、迭代输出有序序列
# 索引和元素建立平衡
1、不能很多节点堆积在一起，否则会让链表失去平衡，查找很慢
2、当链表节点个数增多，对应的索引也要增多
3、避免复杂度增大，查找、插入、删除性能下降

