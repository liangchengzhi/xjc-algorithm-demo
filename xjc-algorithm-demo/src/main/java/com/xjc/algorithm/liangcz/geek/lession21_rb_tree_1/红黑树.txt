# 平衡二叉树(AVL tree)
为了避免二叉树性能降为链表，所以我们设计了二叉平衡树
任何节点，左子树和右子树的高度不能相差1,叫平衡二叉树。
红黑树是平衡二叉树的特殊情况。
设计平衡二叉树初衷是避免频繁插入和删除造成性能下降问题。
# 红黑树(Red Black Tree)
红黑树的定义：
1、根节点是黑色
2、每个叶子节点都是黑色的空节点(nil)
3、任意的节点都不能同时为红色，所以红色节点都是被黑色节点间隔的
4、每个节点可达叶子节点的路径，经过的黑色节点是一样的。
# 红黑树的时间复杂度
二叉树的时间复杂度和高度有关系
其插入、删除、查找最大时间复杂度都不超过2log2^n


推导方法：先去掉红色节点，跟平衡二叉树比较
为什么工业上喜欢红黑树？
1、具有平衡二叉树的特点，避免退化为链表，时间复杂度解决log2^n
2、满足快速的插入、删除、查找
3、避免了像平衡二叉树维护数插入和删除大量的工作