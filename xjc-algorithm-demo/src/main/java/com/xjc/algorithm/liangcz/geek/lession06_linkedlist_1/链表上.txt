# 链表
包含单链表、双向链表、循环链表、循环双向链表

# java 的linkedlist 是一个双向链表
双向链表是一种空间换时间的思想，相比单链表，每个节点加多一个指针，对于插入和删除都减少了时间。

# 单链表：
查找：O(n)
插入：时间复杂度O(1),但是查到到该链表是O(n),所以时间复杂度是O(n)
删除：时间复杂度O(1),但是查到到该链表是O(n),所以时间复杂度是O(n)
# 双向链表
随机访问：O(n)
插入、删除：O(1)
与数组性能刚好相反

# 链表和数组比较，什么时候使用数组和链表？
数组是连续的内存空间，可以使用CPU预读的功能，而链表对CPU缓存不友好，无法预读。数组访问速度更高。
数组的缺点是要申请连续空间，如果只有零散的空间，很容易导致OOM。而链表则能充分利用零散的空间。
链表比数组更费空间，因为每个节点都需要额外的内存来存放指针，内存消耗会翻倍。
链表如果频繁的插入或者删除，会导致频繁的内存申请和释放，如果是java语言，可能导致频繁的GC.

# 如何基于链表实现 LRU 缓存淘汰算法？
思路：维护一个有序的单链表，越靠近尾部是越早访问的。当有一个新数据进来，我们从头开始遍历链表：
1、如果数据已经在链表中，则把该数据删除，重新插入到链表头中。
2、如果数据不在链表中，则分两种情况：
a 如果链表没满，则直接插入头部。
b 如果链表已满，则删除最后的元素，插入头部。
