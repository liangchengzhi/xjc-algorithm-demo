# 树的高度、深度、层级
节点高度：节点到叶子节点的最长路径（边数）
节点深度：根节点到这个节点的边数
节点层数：节点深度+1
数的高度：根节点的高度
# 二叉树
每个节点，最多有两个叉，左节点和右节点。
满二叉树：每个节点都有左子节点和右子节点
完全二叉树：叶子节点都在最下面两层，并且除了最后一层，
        其他层的节点都是节点最大化（资源最大利用）
# 二叉树的实现方式
链表法和数组法
#链表村存储法
每个节点都有左右子节点指针
#数组存储法
假设根节点是1，左右子节点是2*i,2*i+1，依次类推。
对于完全二叉树，只浪费一个0位置，对于非完全二叉树，浪费很多位置。
大部分二叉树使用链式存储法，堆使用的是数组存储法。
# 二叉树遍历（前序遍历、中序遍历、后序遍历）
前序遍历：对于任意的节点，先遍历这个节点，再遍历左子节点，再遍历右子节点
中序遍历：对于任意的节点，先遍历左子节点，再遍历这个节点，再遍历右子节点
前序遍历：对于任意的节点，先遍历左子节点，再遍历右子节点，再遍历左子节点
# 二叉树遍历时间复杂度
O(n)





