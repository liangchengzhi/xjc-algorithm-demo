# 散列表和链表经常一起使用
LRU 缓存淘汰算法，将最近用的最少的数据移除
使用散列表+双向链表(再加拉链)的数据结构来实现，LRU
1、散列表可以提高查询速度，可以将删除、查找、添加时间复杂度降低为O(1)
2、双向链表可以存放更多数据，解决散列冲突
3、为了实现LRU，需要将最少时间的节点移除功能
  1) 总结来说将最新用的节点放在尾巴
  2) 删除时候删除头节点
4、为什么需要拉链和双向链表？
  为了找到最近没使用过的节点，删除
   1) 插入时候，将拉链关联，在纵向把它当成单链表维护
   2) 在横向，当成当链表维护
   3) 无论是横向还是纵向，都是尾巴进，头出
   4) 删除时候，删除拉链头节点的双向链表所在的头节点
   5) 添加，添加在拉链节点尾节点的双向链表所在的尾节点
# redis 同时使用跳表和散列表
1、使用跳表方便快速通过value来查找数据
2、使用散列表可以通过key来查找数据

# JAVA 的linkedHashMap
1、支持LRU
2、支持排序，最近使用的在最后面存储
